generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  mobile_number     String    @unique
  bio               String    @default("")
  firstname         String
  lastname          String
  isOnline          Boolean   @default(false)
  lastSeen          DateTime?
  profilePictureUrl String?   @default("")
  createdAt         DateTime  @default(now())

  chats            Chat[]
  contacts         UserContact[]     @relation("UserContactsOwner")
  asContacts       UserContact[]     @relation("UserContactsContact")
  chatParticipants ChatParticipant[]
}

model UserContact {
  id        String   @id @default(cuid())
  ownerId   String
  contactId String
  FirstName String
  LastName  String
  createdAt DateTime @default(now())
  owner     User     @relation("UserContactsOwner", fields: [ownerId], references: [id])
  contact   User     @relation("UserContactsContact", fields: [contactId], references: [id])

  @@unique([ownerId, contactId])
}

model Chat {
  id            String    @id @default(cuid())
  lastMessage   String?   @default("")
  lastMessageAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  users            User[]
  messages         Message[]
  chatParticipants ChatParticipant[]
}

// Add this new model for better chat management
model ChatParticipant {
  id          String    @id @default(cuid())
  chatId      String
  userId      String
  unreadCount Int       @default(0)
  lastReadAt  DateTime?

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
}

model Message {
  id        String    @id @default(cuid())
  text      String
  senderId  String
  fileUrl   String?   @default("")
  chatId    String
  seen      Boolean   @default(false)
  delivered Boolean   @default(false)
  createdAt DateTime  @default(now())
  seenAt    DateTime? @default(now())
  chat      Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model UserVerification {
  id               String   @unique @default(cuid())
  email            String   @unique
  verificationCode String
  expiryTime       DateTime @default(now())
}
